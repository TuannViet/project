{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4440a1cc-2301-4f37-a386-635e39571acd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 1\n",
    "def tong_tu_1_den_n(n):\n",
    "    \"\"\"Tính tổng các số nguyên từ 1 đến n.\"\"\"\n",
    "    if n <= 0:\n",
    "        return 0\n",
    "    tong = n * (n + 1) // 2  # Công thức Gauss\n",
    "    return tong\n",
    "\n",
    "\n",
    "# 2\n",
    "def la_so_nguyen_to(so):\n",
    "    \"\"\"Kiểm tra số có phải nguyên tố không.\"\"\"\n",
    "    if so <= 1:\n",
    "        return False\n",
    "    if so == 2:\n",
    "        return True\n",
    "    if so % 2 == 0:\n",
    "        return False\n",
    "    can = int(so ** 0.5)\n",
    "    for uoc in range(3, can + 1, 2):\n",
    "        if so % uoc == 0:\n",
    "            return False\n",
    "    return True\n",
    "\n",
    "\n",
    "# 3\n",
    "def giai_thua(n):\n",
    "    \"\"\"Tính n! = 1*2*3*...*n\"\"\"\n",
    "    if n < 0:\n",
    "        return None\n",
    "    ket_qua = 1\n",
    "    for i in range(1, n + 1):\n",
    "        ket_qua *= i\n",
    "    return ket_qua\n",
    "\n",
    "\n",
    "# 4\n",
    "def dem_chu_so(so):\n",
    "    \"\"\"Đếm số chữ số của số nguyên (không dùng chuỗi).\"\"\"\n",
    "    so = abs(so)\n",
    "    if so == 0:\n",
    "        return 1\n",
    "    dem = 0\n",
    "    while so > 0:\n",
    "        dem += 1\n",
    "        so //= 10\n",
    "    return dem\n",
    "\n",
    "\n",
    "# 5\n",
    "def y_nghia_cuoc_song(danh_sach):\n",
    "    \"\"\"Nếu danh sách có số 42 => thông điệp đặc biệt.\"\"\"\n",
    "    if 42 in danh_sach:\n",
    "        return \"Tôi đã tìm ra ý nghĩa của cuộc sống!\"\n",
    "    else:\n",
    "        return \"Chỉ là trò đùa thôi!\"\n",
    "\n",
    "\n",
    "# 6\n",
    "def tong_so_nguyen_to_trong_khoang(a, b):\n",
    "    \"\"\"Tính tổng các số nguyên tố trong đoạn [a, b].\"\"\"\n",
    "    tong = 0\n",
    "    for i in range(a, b + 1):\n",
    "        if la_so_nguyen_to(i):\n",
    "            tong += i\n",
    "    return tong\n",
    "\n",
    "\n",
    "# 7\n",
    "def uoc_nguyen_to_lon_nhat(n):\n",
    "    \"\"\"Tìm ước nguyên tố lớn nhất của n.\"\"\"\n",
    "    n = int(n)\n",
    "    lon_nhat = -1\n",
    "    while n % 2 == 0:\n",
    "        lon_nhat = 2\n",
    "        n //= 2\n",
    "    uoc = 3\n",
    "    while uoc * uoc <= n:\n",
    "        while n % uoc == 0:\n",
    "            lon_nhat = uoc\n",
    "            n //= uoc\n",
    "        uoc += 2\n",
    "    if n > 1:\n",
    "        lon_nhat = max(lon_nhat, n)\n",
    "    return lon_nhat\n",
    "\n",
    "\n",
    "# 8\n",
    "def la_palindrome(so):\n",
    "    \"\"\"Kiểm tra số có đối xứng (palindrome) không.\"\"\"\n",
    "    chuoi = str(so)\n",
    "    return chuoi == chuoi[::-1]\n",
    "\n",
    "def dao_nguoc(so):\n",
    "    \"\"\"Đảo ngược chữ số của số.\"\"\"\n",
    "    chuoi = str(so)\n",
    "    return int(chuoi[::-1])\n",
    "\n",
    "def dao_cong_den_palindrome(so):\n",
    "    \"\"\"Lặp: n = n + reverse(n) cho tới khi n là palindrome.\"\"\"\n",
    "    buoc = 0\n",
    "    while not la_palindrome(so) and buoc < 1000:\n",
    "        so = so + dao_nguoc(so)\n",
    "        buoc += 1\n",
    "    return buoc, so\n",
    "\n",
    "\n",
    "# 9\n",
    "def so_chinh_phuong(so):\n",
    "    can = int(math.isqrt(so))\n",
    "    return can * can == so\n",
    "\n",
    "def chu_so_khac_nhau(so):\n",
    "    \"\"\"Kiểm tra các chữ số có khác nhau hoàn toàn không.\"\"\"\n",
    "    chuoi = str(so)\n",
    "    return len(set(chuoi)) == len(chuoi)\n",
    "\n",
    "def so_chinh_phuong_chu_so_khac_nhau(n):\n",
    "    \"\"\"Liệt kê số chính phương <= n có chữ số khác nhau.\"\"\"\n",
    "    ket_qua = []\n",
    "    for i in range(1, int(math.isqrt(n)) + 1):\n",
    "        cp = i * i\n",
    "        if chu_so_khac_nhau(cp):\n",
    "            ket_qua.append(cp)\n",
    "    return ket_qua\n",
    "\n",
    "\n",
    "# 10\n",
    "bo_nho = {1: 1}\n",
    "\n",
    "def do_dai_collatz(so):\n",
    "    \"\"\"Tính độ dài chuỗi Collatz.\"\"\"\n",
    "    day = []\n",
    "    hien_tai = so\n",
    "    while hien_tai not in bo_nho:\n",
    "        day.append(hien_tai)\n",
    "        if hien_tai % 2 == 0:\n",
    "            hien_tai //= 2\n",
    "        else:\n",
    "            hien_tai = 3 * hien_tai + 1\n",
    "    do_dai = bo_nho[hien_tai]\n",
    "    for x in reversed(day):\n",
    "        do_dai += 1\n",
    "        bo_nho[x] = do_dai\n",
    "    return bo_nho[so]\n",
    "\n",
    "def collatz_dai_nhat_den_n(n):\n",
    "    \"\"\"Tìm số trong [1..n] có chuỗi Collatz dài nhất.\"\"\"\n",
    "    dai_nhat = 0\n",
    "    so_tot_nhat = 1\n",
    "    for i in range(1, n + 1):\n",
    "        d = do_dai_collatz(i)\n",
    "        if d > dai_nhat or (d == dai_nhat and i < so_tot_nhat):\n",
    "            dai_nhat = d\n",
    "            so_tot_nhat = i\n",
    "    return so_tot_nhat, dai_nhat\n",
    "\n",
    "\n",
    "# 11\n",
    "def dem_uoc_chan(n):\n",
    "    \"\"\"Đếm số ước chẵn của n.\"\"\"\n",
    "    if n % 2 != 0:\n",
    "        return 0\n",
    "    dem = 0\n",
    "    for i in range(2, n + 1, 2):\n",
    "        if n % i == 0:\n",
    "            dem += 1\n",
    "    return dem\n",
    "\n",
    "\n",
    "# 12\n",
    "def tien_lai_ngan_hang(tien_goc, so_thang):\n",
    "    \"\"\"Lãi suất 0.7% mỗi tháng, bỏ phần lẻ.\"\"\"\n",
    "    tong = tien_goc * ((1 + 0.007) ** so_thang)\n",
    "    return int(tong)\n",
    "\n",
    "\n",
    "# 13\n",
    "def tong_uoc_khong_ke_no(n):\n",
    "    \"\"\"Tổng các ước nhỏ hơn chính nó.\"\"\"\n",
    "    tong = 1\n",
    "    for i in range(2, int(math.isqrt(n)) + 1):\n",
    "        if n % i == 0:\n",
    "            tong += i\n",
    "            if i != n // i:\n",
    "                tong += n // i\n",
    "    return tong\n",
    "\n",
    "def la_cap_than_thiet(a, b):\n",
    "    \"\"\"Kiểm tra cặp (a, b) có phải số thân thiết không.\"\"\"\n",
    "    return tong_uoc_khong_ke_no(a) == b and tong_uoc_khong_ke_no(b) == a\n",
    "\n",
    "\n",
    "# ---------------------- Bài 14 ----------------------\n",
    "def ucln(a, b):\n",
    "    \"\"\"Tính ước chung lớn nhất bằng thuật toán Euclid.\"\"\"\n",
    "    while b != 0:\n",
    "        a, b = b, a % b\n",
    "    return abs(a)\n",
    "\n",
    "\n",
    "# ---------------------- Bài 15 ----------------------\n",
    "def ga_cho(tong_con, tong_chan):\n",
    "    \"\"\"Giải hệ: gà + chó = tổng_con; 2gà + 4chó = tổng_chân.\"\"\"\n",
    "    if tong_chan % 2 != 0:\n",
    "        return \"vô lý\"\n",
    "    cho = tong_chan // 2 - tong_con\n",
    "    ga = tong_con - cho\n",
    "    if cho < 0 or ga < 0:\n",
    "        return \"vô lý\"\n",
    "    return ga, cho\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "anaconda-ai-2024.04-py310",
   "language": "python",
   "name": "conda-env-anaconda-ai-2024.04-py310-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
